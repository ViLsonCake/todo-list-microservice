version: '3'

services:
  auth_postgres:
    container_name: auth_postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - todo_storage:/data/postgres
    networks:
      - eureka-network
    ports:
      - '5434:5432'

  postgres_keycloak:
    container_name: postgres_keycloak
    image: postgres:latest
    environment:
      POSTGRES_USER: ${KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_DB: ${KEYCLOAK_DB}
    volumes:
      - keycloak_storage:/data/postgres
    networks:
      - eureka-network
    ports:
      - '5433:5432'

  keycloak:
    container_name: keycloak-microservices
    image: quay.io/keycloak/keycloak:22.0.5
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_SCHEMA: public
      DB_DATABASE: ${KEYCLOAK_DB}
      DB_USER: ${KEYCLOAK_USER}
      DB_PASSWORD: ${KEYCLOAK_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_HOSTNAME: localhost
    ports:
      - '8080:8080'
    depends_on:
      - postgres_keycloak
    networks:
      - eureka-network
    command:
      - start-dev

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    container_name: todo_elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - '9200:9200'
    volumes:
      - todo_storage:/var/lib/elastic/data
    networks:
      - eureka-network

  mongodb:
    image: mongo:latest
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_storage:/mongo/data
    networks:
      - eureka-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - '2181:2181'
    networks:
      - kafka-network
      - eureka-network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - kafka_storage:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - kafka-network
      - eureka-network

  eureka-server:
    container_name: eureka-server
    build:
      context: /eureka-server
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '8761:8761'
    networks:
      - eureka-network

  api-gateway:
    build:
      context: /api-gateway
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '8765:8765'
    depends_on:
      - eureka-server
    networks:
      - eureka-network

  authorization-server:
    build:
      context: /authorization-server
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '8083:8083'
    depends_on:
      - eureka-server
      - api-gateway
      - keycloak
      - kafka
    networks:
      - eureka-network

volumes:
  keycloak_storage:
  todo_storage:
  mongo_storage:
  kafka_storage:

networks:
  kafka-network:
  eureka-network: